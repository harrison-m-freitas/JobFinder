name: Docker

on:
  push:
    branches: [ "master" ]
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "src/**"
      - "pyproject.toml"
      - "requirements.txt"
    tags:
      - "v*.*.*"

  pull_request:
    branches: [ "master" ]
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "src/**"
      - "pyproject.toml"
      - "requirements.txt"

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write  # necessário para publicar no GHCR

jobs:
  build:
    name: Build (com cache)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Lint Dockerfile (hadolint)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
        continue-on-error: true  # não quebre seu fluxo no início

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.description=Job Finder image
            org.opencontainers.image.licenses=Unlicense

      # Login somente quando não for PR (PRs não publicam)
      - name: Login no GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & (se aplicável) Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
